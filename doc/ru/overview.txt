		Copyright Unet Global LLC 2017

		IOT Gateway Software

	1. Термины и определения

	Устройство IOT Gateway - специфичное устройство (миникомпьютер, выпускаемый Unet) или любой компьютер (в частности мобильный телефон), на
котором работает IOT Gateway Software (далее ПО). Предназначено для взаимодействия с физически подключенными к нему аппаратными устройствами, входящими
в Конфигурацию IOT. Такому устройству необходимо взаимодействие с сервером Unet для своего начального конфигурирования, синхронизации изменений в
Конфигурации IOT, отправки сигналов от непосредственно подключенных устройств к другим Устройствам IOT Gateway или серверу Unet.

	Конфигурация IOT - набор конфигурационных параметров оборудования, а также пользовательских правил, которые описывают возможные действия и
условия их исполнения. Действием может быть как отправка сигнала аппаратному устройству (например, сигнала "открыть" электронному замку), так и
выполнение действия сервером Unet (например, отправка SMS или Email). Условием может быть сигнал от аппаратного устройства (например, сработка
датчика движения), расписание по времени, сигнал от сервера Unet (например, поступление личного сообщения) или сложная комбинация перечисленных
видов условий. В общем случае пользовательское правило состоит из набора Узлов Конфигурации IOT и установленных связей между ними.

	Узел Конфигурации IOT - фактически программный модуль, соответствующий абстрактной модели объекта, который имеет от 0 до Ni сигнальных входов и
от 0 до No сигнальных выходов (плюс один неявный выход есть у всех узлов для сигнализирования об ошибке), а также может иметь сохраняемое состояние.
При этом Узел может как иметь внутренние подключения к аппаратным или программным устройствам, реализуя какую-то конкретную модель работы с ними, так
и являться простым преобразователем входных сигналов в выходные или чистым генератором, что подразделяет Узлы на несколько Ролей: Источника Событий,
Оператора, Исполнителя. Некий специфичный тип Узла может исполнять все роли одновременно.

	Роль Источника Событий означает, что Узел может генерировать первичные события (т.е. сигналы, которые не являются результатом обработки других
сигналов). Поскольку у каждого Узла есть один неявный выход для сигнализирования об ошибке, то по большому счету каждый Узел может являться
Источником Событий, и к событиям ошибок можно привязать правила. Но при нормальной работе ошибок не происходит, и Источниками Событий являются Узлы,
имеющие минимум один сигнальный выход и не работающие в роли Оператора (в частности, Узлы не имеющие входов). Например, чистым Истоником Событий будет
Узел реализующий работу с аппаратным выключателем, имеющий 0 входов и 1 выход, значение которого имеет логический тип данных со значением Истина при
включенном выключателе и Ложь при выключенном.

	Роль Оператора означает, что Узел имеет минимум 1 вход и минимум 1 явный выход, и занимается исключительно преобразованием последовательности входных
сигналов в выходные по некоторому постоянному, как правило, известному пользователю принципу. При этом внутреннее состояние Операторов не является
сохраняемым (т.е. не представляет прямого интереса для пользователя). В работу Оператора может быть вовлечено аппаратное или виртуальное устройство (в
частности источник данных в режиме чтения - база данных, файловая система и т.п.). Примером чистого Оператора является Узел, реализующий оператор
сравнения, который имеет 1 вход для числового значения и 1 выход для логического значения, показывающего, выполняется ли заданное пользователем условие.

	Роль Исполнителя означает наличие минимум 1 входа и такой последовательности входящих сигналов, которая инициирует выполнение некого действия, не
связанного только с формированием выходных сигналов (в частности, если явных выходов нет). Таким действием может быть отправка команды аппаратному или
виртуальному устройству или изменение внутреннего состояния Узла с сохранением для анализа пользователем. Примером чистого Исполнителя является Узел,
реализующий работу с аппаратной лампочкой и имеющий 0 выходов 1 вход для управляющего логического сигнала на включение/выключение лампочки.

	2. Общая информация

	ПО, функционирующее на некотором Устройстве IOT Gateway (далее Хост), обеспечивает исполнение заданного
Конфигурацией IOT (далее просто Конфигурацией) поведения в той части, которая касается непосредственно подключенных к Хосту аппаратных устройств.
В целом Конфигурация может включать в себя несколько Хостов, которые соединяются друг с другом с целью обмена данными. Между каждой парой Хостов
возможна как прямая связь (когда они находятся в одной сети, или возможно соединение через внешние IP-адреса), так и посредством сервера Unet.

	3. Программная архитектура

	ПО содержит набор Модулей, реализующих поддержку как специфичных аппаратных устройств, так и различных Узлов Конфигурации IOT. Модули
объединяются в Пачки Модулей, представляемые динамически загружаемыми библиотеками. Часть модулей являются встроенными, часть написаны сторонними
производителями.
	В основе ПО лежит библиотека диспетчера событий libuv, соответственно все модули также работают на событийной модели и не должны использовать
блокирующие вызовы.
	Каждый поставляемый Unet модуль имеет зарегистрированный целочисленный идентификатор и реализует одну или несколько Ролей из следующего списка:
		- Детектор аппаратных устройств;
		- Драйвер аппаратных устройств;
		- Узлов Конфигурации IOT.
	Реализация Роли означает реализацию соответствующего программного интерфейса. Далее подробно описана каждая роль.

	3.1. Роль детектора аппаратных устройств.

	Задача модуля в роли детектора - обнаруживать подключенные аппаратные устройства. Каждый модуль детектора специализируется либо на специфичном
способе подключения (физическом USB, сетевом uPnP, абстрактном Linux Input и т.п.), либо на обнаружении специфичных устройств.
	Программный интерфейс детектора состоит из двух функций - start и stop. Первая вызывается ядром ПО в момент, когда можно начать обнаруживать
устройства, вторая вызывается перед выгрузкой модуля с целью освобождения ресурсов. Модулю доступна функция ядра, которая позволяет добавлять
и удалять устройства из реестра аппаратных устройств. При добавлении устройства модуль указывает всю идентифицирующую информацию, которая может
понадобится модулю драйвера для определения факта, что устройство является подходящим.
	Например, в ПО имееются встроенные модули для работы в Linux-системах с устройствами ввода на основе системного драйвера evdev, который создает
ряд абстракных интерфейсов утройств ввода, позволяя не учитывать их физический способ подключения (будь то USB, COM-порт или интегрированные в
системную плату устройства). Модуль детектора таких устройств ввода периодически (раз в 5 секунд) проверяет, не поменялся ли набор подключенных
фиизических устройств. Если поменялся, то вносит изменения в реестр. Для каждого нового устройства ядро ПО пытается найти подходящий драйвер путем
опроса всех загруженных модулей драйверов.

	3.2. Роль драйвера аппаратных устройств.

	Задача модуля в роли драйвера - предоставить унифицированный интерфейс по работе с поддерживаемым устройством в соответсвии с классом последнего.
В ПО имеются встроенные интерфейсы для типичных классов устройств, таких как клавиши, лампочки, видеокамеры, микрофоны, замки и т.п. Также модуль
драйвера может объявить персонифицированный интерфейс класса устройств для использования со специфичными модулями Узлов УОнфигурации, которые, обычно,
предоставляются одним производителем и загружаются в составе одной Пачки Модулей.
	Программный интерфейс модуля драйвера включает в себя функцию проверки факта совместимости конкретного устройсва с драйвером, ряд функций для
инициализации/деинициализации и старта/остановки экземпляра драйвера и ряд функций для взаимодействия драйвера с модулем-клиентом (Узлом). Драйвер
может отправлять клиенту сообщения о состоянии аппаратного устройства и получать от него команды для управления устройством.
	ПО пытается автоматически создать экземпляр модуля драйвера для каждого найденного аппаратного устройства. То есть, при наличии нескольких
однотипных устройств будет создано соответствующее количество экземпляров одного и того же модуля драйвера.

	3.3. Роль узла конфигурации.

	Задача модуля в роли узла конфигурации - генерировать выходные сигналы и/или управлять связанными устройствами и внутренним состоянием в соответствии
с настроками пользователя и/или входными сигналам, и/или состоянием связанных устройств, и/или по любому другому известному критерию. Выходные сигналы
одних узлов поступают на входы к другим узлам. В отличие от детекторов и драйверов, экземпляры модуля источника событий создаются не автоматически, а в
соответсвии с Конфигурацией IOT. Каждый узел может быть связан с одним или несколькими аппаратными устройствами. Привязка осуществляется пользователем в
ручном или автоматическом режиме на этапе конфигурирования.
	Программный интерфейс узла конфигурации включает в себя ряд функций для инициализации/деинициализации и старта/остановки экземпляра модуля,
ряд функций для взаимодействия со связанными драйверами (в роли клиента), а также функции для доставки сигналов ядру ПО и получения сигналов от ядра ПО.
	Конфигурация модуля содержит информацию о требуемом классе интерфейса драйверов, а также о входных и выходных линиях узла. Для каждой
входной/выходной линии указывается тип принимаемых/отправляемых данных. Для устновления связи между двумя узлами требуется совпадение типов данных.

