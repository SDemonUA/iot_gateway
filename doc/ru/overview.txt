		Copyright Unet Global LLC 2017

		IOT Gateway Software

	1. Термины и определения

	Конфигурация IOT - набор конфигурационных параметров оборудования, а также пользовательских правил, которые описывают возможные действия и
условия их исполнения. Действием может быть как отправка сигнала аппаратному устройству (например, сигнала "открыть" электронному замку), так и
выполнение действия сервером Unet (например, отправка SMS или Email). Условием может быть сигнал от аппаратного устройства (например, сработка
датчика движения), расписание по времени, сигнал от сервера Unet (например, поступление личного сообщения) или сложная комбинация перечисленных
видов условий.

	Устройство IOT Gateway - специфичное устройство (миникомпьютер, выпускаемый Unet) или любой компьютер, на котором работает IOT Gateway
Software. Предназначено для взаимодействия с физически подключенными к нему аппаратными устройствами, включенными в Конфигурацию IOT. Такому
устройству необходимо взаимодействие с сервером Unet для своего начального конфигурирования, синхронизации изменений в Конфигурации IOT, отправки
сигналов от непосредственно подключенных устройств к другим Устройствам IOT Gateway или серверу Unet.

	2. Общая информация

	IOT Gateway Software (далее ПО), функционирующее на некотором Устройстве IOT Gateway (далее Хост), обеспечивает исполнение заданного
Конфигурацией IOT (далее просто Конфигурацией) поведения в той части, которая касается непосредственно подключенных к Хосту аппаратных устройств.
В целом, Конфигурация может включать в себя несколько Хостов, которые соединяются друг с другом с целью обмена данными. Между каждой парой Хостов
возможна как прямая связь (когда они находятся в одной сети или возможно соединение через внешние IP-адреса), так и посредством сервера Unet.

	3. Программная архитектура

	ПО содержит набор Модулей, реализующих поддержку как специфичных аппаратных устройств, так и различных классов объектов Конфигурации. Модули
объединяются в Пачки Модулей, представляемые динамически загружаемыми библиотеками. Часть модулей являются встроенными, часть написаны сторонними
производителями.
	В основе ПО лежит библиотека диспетчера событий libuv, соответственно все модули также работают на событийной модели и не должны использовать
блокирующие вызовы.
	Каждый модуль имеет зарегистрированный целочисленный идентификатор и реализует одну или несколько Ролей из следующего списка:
		- детектор аппаратных устройств;
		- драйвер аппаратных устройств;
		- источник событий;
		- исполнитель (включает роль "источник событий");
		- оператор условия.
	Реализация Роли означает реализацию соответствующего программного интерфейса. Далее подробно описана каждая роль.

	3.1. Роль детектора аппаратных устройств.

	Задача модуля в роли детектора - обнаруживать подключенные аппаратные устройства. Каждый модуль детектора специализируется либо на специфичном
способе подключения (физическом USB, сетевом uPnP, абстрактном Linux Input и т.п.), либо на обнаружении специфичных устройств.
	Программный интерфейс детектора состоит из двух функций - start и stop. Первая вызывается ядром ПО в момент, когда можно начать обнаруживать
устройства, вторая вызывается перед выгрузкой модуля с целью освобождения ресурсов. Модулю доступна функция ядра, которая позволяет добавлять
и удалять устройства из реестра аппаратных устройств. При добавлении устройства модуль указывает всю идентифицирующую информацию, которая может
понадобится модулю драйвера для определения факта, что устройство является подходящим.
	Например, в ПО имееются встроенные модули для работы в Linux-системах с устройствами ввода на основе системного драйвера evdev, который создает
ряд абстракных интерфейсов утройств ввода, позволяя не учитывать их физический способ подключения (будь то USB, COM-порт или интегрированные в
системную плату устройства). Модуль детектора таких устройств ввода периодически (раз в 5 секунд) проверяет, не поменялся ли набор подключенных
экземпляров. Если поменялся, то вносит изменения в реестр устройств. Для каждого нового устройства ядро ПО пытается найти подходящий драйвер путем
опроса всех загруженных модулей драйверов.

	3.2. Роль драйвера аппаратных устройств.

	Задача модуля в роли драйвера - предоставить унифицированный интерфейс по работе с поддерживаемым устройством в соответсвии с классом последнего.
В ПО имеются встроенные интерфейсы для типичных классов устройств, таких как клавиши, лампочки, видеокамеры, микрофоны, замки и т.п. Также модуль
драйвера может объявить персонифицированный интерфейс класса устройств для использования со специфичными модулями источников событий или
исполнителей, которые, обычно, предоставляются одним производителем и загружаются в составе одной Пачки Модулей.
	Программный интерфейс модуля драйвера включает в себя функцию проверки факта совместимости конкретного устройсва с драйвером, ряд функций для
инициализации/деинициализации и старта/остановки экземпляра драйвера и ряд функций для взаимодействия драйвера с модулем-потребителем (источником
событий или исполнителем). Драйвер может отправлять потребителю сообщения и получать от него команды.
	ПО пытается автоматически создать экземпляр модуля драйвера для каждого найденного аппаратного устройства. То есть, при наличии нескольких
однотипных устройств будет создано соответствующее количество экземпляров одного и того же модуля драйвера.

	3.3. Роль источника событий.

	Задача модуля в роли источника событий - генерировать унифицированные сообщения в ответ на сигналы со связанных устройств или по любому требуемому
критерию. Сообщения поступают на вход операторов условия. В отличие от детекторов и драйверов, экземпляры модуля источника событий создаются не
автоматически, а в соответсвии с Конфигурацией IOT. Источник событий может быть связан с одним или несколькими аппаратными устройствами. Привязка
осуществляется пользователем в ручном или автоматическом режиме на этапе конфигурирования.
	Программный интерфейс модуля источника событий включает в себя ряд функций для инициализации/деинициализации и старта/остановки экземпляра модуля,
ряд функций для взаимодействия со связанными драйверами (в роли потребителя), а также функции для доставки сообщений ядру ПО.
	Конфигурация модуля содержит информацию о требуемом классе интерфейса драйвера или драйверов, а также список классов сообщений, которые может
генерировать источник событий. Первый набор используется для сопоставления с аппаратными устройствами, а второй для соспоставления с условными
операторами. 

